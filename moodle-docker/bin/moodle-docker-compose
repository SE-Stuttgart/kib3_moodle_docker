#!/bin/bash
set -e

# First find out if this was called from symlink,
# then find the real path of parent directory.
# This is needed because macOS does not have GNU realpath.
thisfile=$( readlink "${BASH_SOURCE[0]}" ) || thisfile="${BASH_SOURCE[0]}"
basedir="$( cd "$( dirname "$thisfile" )/../" && pwd -P )"

echo "Basedir" . $basedir

# Export all envionment variables
set -a
source $basedir/config.env
set +a
# Test 
echo "Course backup file: ${COURSE_BACKUP_FILE}"

export ASSETDIR="${basedir}/assets"

# Test if we have docker compose v2, and keep quiet if we don't.
ver=$(docker compose version > /dev/null 2>&1 && docker compose version --short) || true
if [[ $ver =~ ^v?2 ]]; then
  dockercompose="docker compose"
else
  echo 'Compose v2 is not available in Docker CLI, falling back to use docker-compose script'
  dockercompose="docker-compose"
fi
dockercompose="${dockercompose} -f ${basedir}/base.yml"
dockercompose="${dockercompose} -f ${basedir}/service.mail.yml"

# PHP Version.
export MOODLE_DOCKER_PHP_VERSION=${MOODLE_DOCKER_PHP_VERSION:-8.1}

# SSL.
if [ "$MOODLE_SERVER_SSL" == true ];
then
  echo "Setting up SSL";
  if [[ $MOODLE_SERVER_URL != https://* ]]; then
    echo "Error: configuration option MOODLE_SERVER_SSL is set to TRUE, but MOODLE_SERVER_URL does not start with https://"
    exit 1
  fi
  dockercompose="${dockercompose} -f ${basedir}/ssl/webserver.ssl.port.yml"
  cp "${MOODLE_SERVER_SSL_CERTIFICATE_FILE}" "${basedir}/moodle-php-apache/root/etc/nginx/moodle_certificate.crt"
  cp "${MOODLE_SERVER_SSL_PRIVATE_KEY_FILE}" "${basedir}/moodle-php-apache/root/etc/nginx/moodle.key"
else
  if [[ $MOODLE_SERVER_URL != http://* ]]; then
      echo "Error: configuration option MOODLE_SERVER_SSL is set to FALSE, but MOODLE_SERVER_URL does not start with http://"
      exit 1
    fi
fi

# Database flavour.
dockercompose="${dockercompose} -f ${basedir}/db/db.${MOODLE_DOCKER_DB}.yml"

# Add support for version specific database settings.
if [ ! -z "$MOODLE_DOCKER_DB_VERSION" ];
then
    filename="${basedir}/db.${MOODLE_DOCKER_DB}.${MOODLE_DOCKER_DB_VERSION}.yml"
    if [ -f $filename ]; then
        dockercompose="${dockercompose} -f ${filename}"
    fi
fi

# Chatbot
if [ "$PLUGIN_CHATBOT" == true ];
then
    dockercompose="${dockercompose} -f ${basedir}/chatbot.yml"
    # SSL.
    if [ "$MOODLE_SERVER_SSL" == true ];
    then
      echo "Setting up Chatbot SSL";
      if [[ $MOODLE_SERVER_URL != https://* ]]; then
        echo "Error: configuration option MOODLE_SERVER_SSL is set to TRUE, but MOODLE_SERVER_URL does not start with https://"
        exit 1
      fi
      cp "${MOODLE_SERVER_SSL_CERTIFICATE_FILE}" "${basedir}/chatbot/moodle_certificate.crt"
      cp "${MOODLE_SERVER_SSL_PRIVATE_KEY_FILE}" "${basedir}/chatbot/moodle.key"
    else
      if [[ $MOODLE_SERVER_URL != http://* ]]; then
          echo "Error: configuration option MOODLE_SERVER_SSL is set to FALSE, but MOODLE_SERVER_URL does not start with http://"
          exit 1
        fi
    fi
fi

if [ "$DEBUG" == true ];
then
  export CHATBOTCOMMAND="tail -f /dev/null"
else
  export CHATBOTCOMMAND="cd /chatbot/ && python run_server.py" 
fi
echo "CHATBOT START COMMAND: ${CHATBOTCOMMAND}"

$dockercompose "$@"
